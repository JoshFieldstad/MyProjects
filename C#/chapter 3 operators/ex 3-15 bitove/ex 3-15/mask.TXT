За да реша задачата, аз съм използвал маска, чрез която взимам нужните 
битове (3, 4, 5, 24, 25, 26). След това правя тези битове от 
оригиналното число на 0 и поставям новите. Това решение ми се струва 
доста добро и разбираемо. 
            uint n = 350; 
            Console.WriteLine("{0}\n{1}", n, Convert.ToString(n, 
2).PadLeft(32, '0')); 
            //mask = 0000011100...00111000 
            uint mask = 8 + 16 + 32 + (uint) (Math.Pow(2, 24) + 
Math.Pow(2, 25) + Math.Pow(2, 26)); 
            uint bits = mask & n; // takes 3, 4, 5, 24, 25, 26 bits 
from n 
            n &= ~mask; // makes bits 3, 4, 5, 24, 25, 26 to 0 -- 
правя битовете на 0, за да може после да се поставят новите чрез | 
(или) 
            mask = bits >> 21; // = 000...000[26][25][24]000 -- 
маската взима главните битове и ги поставя на по-ниските позиции 
            n |= mask; // makes 3, 4, 5 bits to 24, 25, 26 
            mask = bits << 21; // = 00000[5][4][3]000...000 
            n |= mask; // makes 24, 25, 26 bits to 3, 4, 5 
            Console.WriteLine("{0}\n{1}", n, Convert.ToString(n, 
2).PadLeft(32, '0'));

